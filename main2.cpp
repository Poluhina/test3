#include <stdlib.h>
#include <iostream>

// Определение структуры TwoInts с двумя целочисленными полями.
struct TwoInts
{
    int a;
    int b;
};

// Определение структуры StructWithArray с массивом и указателем на целое число.
struct StructWithArray
{
    int arr[4];
    int* someNumber;
};

int main()
{
    TwoInts i2 = { };
    i2.a = 5;
    i2.b = 7;

    std::cout << i2.a << std::endl; // Выводит 5
    std::cout << i2.b << std::endl; // Выводит 7
    
    StructWithArray s = { };
    // Присвоение значения элементу массива в структуре.
    s.arr[0] = 10;

    StructWithArray s1 = { };
    // Присвоение значения элементу массива в другой структуре.
    s1.arr[0] = 15;

    // Создание указателя на структуру StructWithArray и присвоение ему адреса структуры s.
    StructWithArray* sPointer = &s;
    // Изменение значения элемента массива в структуре через указатель.
    sPointer->arr[0] = 20;

    // Вывод значений элемента массива в структуре через обычный доступ.
    std::cout << s.arr[0] << std::endl; // Выводит 20
    // Изменение значения элемента массива напрямую.
    s.arr[0] = 25;
   
    std::cout << s.arr[0] << std::endl; // Выводит 25
  
    sPointer->arr[0] = 30;
    
    std::cout << s.arr[0] << std::endl; // Выводит 30

    // Изменение указателя на структуру и присвоение ему адреса другой структуры.
    sPointer = &s1;
    // Изменение значения элемента массива в новой структуре через указатель.
    sPointer->arr[0] = 35;
    // Вывод значения элемента массива в структуре s (не изменилось).
    std::cout << s.arr[0] << std::endl; // Выводит 30
    // Вывод значения элемента массива в структуре s1 (изменилось).
    std::cout << s1.arr[0] << std::endl; // Выводит 35

    // Создание массива структур StructWithArray.
    StructWithArray structArray[2] = { };
    // Изменение значения элемента массива в первой структуре.
    structArray[0].arr[3] = 77;
    // Присвоение указателю значение адреса элемента массива в первой структуре.
    structArray[1].someNumber = &structArray[0].arr[3];

    // Присвоение указателю адреса элемента массива в структуре s через указатель на структуру.
    sPointer = &s;
    // Создание указателя и присвоение ему адреса элемента массива через указатель на структуру.
    int* pointer = &sPointer->arr[3];
    // Изменение значения элемента массива в структуре через указатель.
    s.arr[3] = 72;
    // Вывод значения, на которое указывает указатель.
    std::cout << *pointer; // Выводит 72

    // Создание экземпляра структуры StructWithArray и заполнение его памяти нулями.
    StructWithArray memory;
    memset(&memory, 0, sizeof(StructWithArray));
    
    return 0;
}

